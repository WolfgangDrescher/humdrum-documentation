#!/usr/bin/perl
#
# Programmer:    Craig Stuart Sapp <craig.stanford.edu>
# Creation Date: Sat Apr 11 20:16:21 PDT 2020
# Last Modified: Sat Apr 11 20:16:24 PDT 2020
# Filename:      makeToolSpan
# Syntax:        perl 5
#
# Description:   Convert:
#                   **census** 
#                into
#                   <span class="tool">census</span>
#                and
#                   **census.** 
#                into
#                   <span class="tool">census</span>.
#                and
#                   **census,** 
#                into
#                   <span class="tool">census</span>,
#                and
#                   [**census**](/tool/census)
#                info
#                   <span class="tool">census</span>
#                and
#                   [**census**](census.html)
#                into
#                   <span class="tool">census</span>
#                and
#                   [**census**](../commands/census.html)
#                info
#                   <span class="tool">census</span>
#

use strict;

my @files = @ARGV;
my @commands = glob("../tool/*");
for (my $i=0; $i<@commands; $i++) {
	$commands[$i] =~ s/^\.\.\/tool\///;
}
# Commands which do not seem to have documentation:
$commands[@commands] = "tonh";
$commands[@commands] = "solfa";
$commands[@commands] = "solfg";
$commands[@commands] = "stats";
$commands[@commands] = "db";
$commands[@commands] = "accent";
$commands[@commands] = "mask";
$commands[@commands] = "sdiss";
$commands[@commands] = "kern2cs";


# print "TOOLS: ", join("\n", @commands), "\n";

foreach my $file (@files) {
	processFile($file);
}

exit(0);



##############################
##
## processFile --
##

sub processFile {
	my ($file) = @_;
	open (FILE, $file) or die "Cannot read $file\n";
	my @contents = <FILE>;
	chomp @contents;
	close FILE;
	my $changed = 0;
	my $newline;
	for (my $i=0; $i<@contents; $i++) {
		$newline = processLine($contents[$i]);
		if ($newline ne $contents[$i]) {
			$contents[$i] = $newline;
			$changed = 1;
		}
	}
	return if !$changed;
	print STDERR "Updating file $file\n";
	# print "FILE CONTENTS: ", join("\n", @contents), "\n";
	open (FILE, ">$file") or die "Cannot write $file\n";
	for (my $i=0; $i<@contents; $i++) {
		print FILE "$contents[$i]\n";
	}
	close FILE;
}



##############################
##
## processLine --
##
##      **census** 
##   into
##      <span class="tool">census</span>
##   and
##      [**census**](/tool/census)
##   into
##      <span class="tool">census</span>
##   and
##      [**census**](census.html)
##   into
##      <span class="tool">census</span>
##   and
##      **census.** 
##   into
##      <span class="tool">census</span>.
##   and
##      **census,** 
##   into
##      <span class="tool">census</span>,
##   and
##      [**census**](../commands/census.html)
##   info
##      <span class="tool">census</span>

sub processLine {
	my ($line) = @_;
	for (my $i=0; $i<@commands; $i++) {
		my $command = $commands[$i];
		$line =~ s/<span class"tool">([^<]+)<\/span>/<span class="tool">$1<\/span>/g;
		$line =~ s/\[\*\*$command\*\*\]\($command\.html\)/<span class="tool">$command<\/span>/g;
		$line =~ s/\[\*\*$command\*\*\]\(\/tool\/$command\)/<span class="tool">$command<\/span>/g;
		$line =~ s/\[\*\*$command,\*\*\]\(\/tool\/$command\)/<span class="tool">$command<\/span>,/g;
		$line =~ s/\[\*\*$command\.\*\*\]\(\/tool\/$command\)/<span class="tool">$command<\/span>./g;
		$line =~ s/\[\*\*$command\*\*,\]\(\/tool\/$command\)/<span class="tool">$command<\/span>,/g;
		$line =~ s/\[\*\*$command\*\*\.\]\(\/tool\/$command\)/<span class="tool">$command<\/span>./g;
		$line =~ s/\[\*\*$command\*\*\]\(\.\.\/commands\/$command\.html\)/<span class="tool">$command<\/span>/g;
		$line =~ s/\[\*\*$command\*\*,\]\(\.\.\/commands\/$command\.html\)/<span class="tool">$command<\/span>,/g;
		$line =~ s/\[\*\*$command\*\*\.\]\(\.\.\/commands\/$command\.html\)/<span class="tool">$command<\/span>./g;
		$line =~ s/\*\*$command\.\*\*/<span class="tool">$command<\/span>./g;
		$line =~ s/\*\*$command,\*\*/<span class="tool">$command<\/span>,/g;
		$line =~ s/\*\*$command\*\*/<span class="tool">$command<\/span>/g;
	}
	return $line;
}



